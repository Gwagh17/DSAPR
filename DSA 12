# Define maximum size
MAX = 20

# Define Employee class
class Employee:
    def __init__(self, name="", code=0, designation="", exp=0, age=0, salary=0):
        self.name = name
        self.code = code
        self.designation = designation
        self.exp = exp
        self.age = age
        self.salary = salary

# Global variables
num = 0
emp = [Employee() for _ in range(MAX)]  # List of Employee objects

# Function to show menu
def show_menu():
    running = True
    while running:
        print("\nUniversity Employee Management System")
        print("Available Options:")
        print("1. Build Table")
        print("2. Insert New Entry")
        print("3. Delete Entry")
        print("4. Search a Record")
        print("5. Exit")

        # Input option
        try:
            option = int(input("Enter your choice: "))
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 5.")
            continue

        # Call function based on the option
        if option == 1:
            build()
        elif option == 2:
            insert()
        elif option == 3:
            delete_record()
        elif option == 4:
            search_record()
        elif option == 5:
            running = False
            print("Exiting the program...")
        else:
            print("Expected Options are 1/2/3/4/5")

# Function to build the employee table
def build():
    global num
    print("\nBuild The Table")
    print("Maximum Entries can be:", MAX)

    try:
        num = int(input("Enter the number of entries required: "))
    except ValueError:
        print("Invalid input. Defaulting to 0.")
        num = 0

    if num > MAX:
        print("Maximum number of entries is 20. Truncating to 20.")
        num = MAX

    print("Enter the following data:")
    for i in range(num):
        emp[i].name = input(f"\nName of Employee {i + 1}: ")
        emp[i].code = int(input(f"Employee ID of Employee {i + 1}: "))
        emp[i].designation = input(f"Designation of Employee {i + 1}: ")
        emp[i].exp = int(input(f"Experience of Employee {i + 1}: "))
        emp[i].age = int(input(f"Age of Employee {i + 1}: "))
        emp[i].salary = int(input(f"Salary of Employee {i + 1}: "))

# Function to insert a new employee
def insert():
    global num
    if num < MAX:
        i = num
        num += 1
        print("\nEnter the information of the Employee:")
        emp[i].name = input("Name: ")
        emp[i].code = int(input("Employee ID: "))
        emp[i].designation = input("Designation: ")
        emp[i].exp = int(input("Experience: "))
        emp[i].age = int(input("Age: "))
        emp[i].salary = int(input("Salary: "))
    else:
        print("Employee Table is Full.")

# Function to delete an employee by index
def delete_index(i):
    global num
    for j in range(i, num - 1):
        emp[j] = emp[j + 1]
    num -= 1  # Decrease number of entries

# Function to delete a record
def delete_record():
    code = int(input("Enter the Employee ID to delete the record: "))
    for i in range(num):
        if emp[i].code == code:
            delete_index(i)
            print("Record deleted successfully.")
            return
    print("Employee ID not found.")

# Function to search for a record by Employee ID
def search_record():
    code = int(input("Enter the Employee ID to search the record: "))
    for i in range(num):
        if emp[i].code == code:
            print(f"\nName: {emp[i].name}")
            print(f"Employee ID: {emp[i].code}")
            print(f"Designation: {emp[i].designation}")
            print(f"Experience: {emp[i].exp}")
            print(f"Age: {emp[i].age}")
            print(f"Salary: {emp[i].salary}")
            return
    print("Employee ID not found.")

# Driver Code
if __name__ == "__main__":
    show_menu()  # Start the menu
