class TreeNode: 
    def __init__(self, name):  # Fixed __init__ spelling
        self.name = name 
        self.children = [] 
 
    def add_child(self, child): 
        self.children.append(child) 
 
    def print_tree(self, level=0): 
        # Print the current node with indentation based on its level 
        print("  " * level + self.name) 
        # Recursively print each child 
        for child in self.children: 
            child.print_tree(level + 1) 
 
# Function to build the tree from user input 
def build_book_tree(): 
    # Create the root node (Book) 
    book = TreeNode("Book") 
 
    # Input chapters 
    num_chapters = int(input("Enter the number of chapters: ")) 
    for i in range(1, num_chapters + 1): 
        chapter_name = input(f"Enter the name of Chapter {i}: ") 
        chapter = TreeNode(chapter_name) 
        book.add_child(chapter) 
 
        # Input sections for this chapter 
        num_sections = int(input(f"Enter the number of sections in {chapter_name}: ")) 
        for j in range(1, num_sections + 1): 
            section_name = input(f"Enter the name of Section {j} in {chapter_name}: ") 
            section = TreeNode(section_name) 
            chapter.add_child(section) 
 
            # Input subsections for this section 
            num_subsections = int(input(f"Enter the number of subsections in {section_name}: ")) 
            for k in range(1, num_subsections + 1): 
                subsection_name = input(f"Enter the name of Subsection {k} in {section_name}: ") 
                subsection = TreeNode(subsection_name) 
                section.add_child(subsection) 
 
    return book 
 
# Main program 
if __name__ == "__main__": 
    book_tree = build_book_tree() 
    print("\nBook Structure:") 
    book_tree.print_tree()
